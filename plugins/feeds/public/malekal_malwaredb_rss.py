from datetime import datetime, timedelta
import logging

from core.observables import Url, Hostname, Ip
from core.feed import Feed
from core.errors import ObservableValidationError


class MalekalMalwareDBURL(Feed):

    default_values = {
        "frequency": timedelta(hours=1),
        "name": "MalekalMalwareDBURL",
        "source": "http://malwaredb.malekal.com/export.php?type=url",
        "description": "Malekal MalwareDB IP / Domain / URL Feed",
    }

    def update(self):
        for dict in self.update_xml('item', ["date", "domain", "url", "ip", "category"]):
            self.analyze(dict)

    def analyze(self, dict):
        # Create the new URL and store it in the DB

        context = {}
        observable_url = dict['url']
        observable_ip = dict['ip']
        observable_hostname = dict['domain']
        observable_tag = dict['category']
        context['source'] = self.name
        context['category'] = dict['category']
        context['hostname'] = dict['domain']
        context['url'] = dict['url']
        context['ip'] = dict['ip']
        date_string = dict['date']
        context['date_added'] = datetime.strptime(date_string, "%Y-%m-%d %H:%M:%S")

        try:
            url = Url.get_or_create(value=observable_url)
            url.add_context(context)
            url.add_source("feed")
            url.tag(observable_tag)
        except ObservableValidationError as e:
            logging.error(e)

        try:
            ip = Ip.get_or_create(value=observable_ip)
            ip.add_context(context)
            ip.add_source("feed")
            ip.tag(observable_tag)
        except ObservableValidationError as e:
            logging.error(e)

        try:
            hostname = Hostname.get_or_create(value=observable_hostname)
            hostname.add_context(context)
            hostname.add_source("feed")
            hostname.tag(observable_tag)
        except ObservableValidationError as e:
            logging.error(e)
